{"name":"Flask-foundation","tagline":"A solid foundation for your flask app","body":"#Flask Foundation\r\n[![Build Status](https://travis-ci.org/JackStouffer/Flask-Foundation.png)](https://travis-ci.org/JackStouffer/Flask-Foundation)\r\n\r\nFlask Foundation is a solid foundation for flask applications, built with best practices, that you can easily construct your website/webapp off of.\r\n\r\nBuilt off of the [bootstrapy project](https://github.com/kirang89/bootstrapy)\r\n\r\nBest practices were learned from\r\n* [Creating Websites With Flask](http://maximebf.com/blog/2012/10/building-websites-in-python-with-flask/)\r\n* [Getting Bigger With Flask](http://maximebf.com/blog/2012/11/getting-bigger-with-flask/)\r\n* [Larger Applications With Flask](http://flask.pocoo.org/docs/patterns/packages/).\r\n\r\n##What Is Included\r\n\r\n* Best Practices setup with blueprints and SQLAlchemy models that will allow you to grow cleanly\r\n* A helpful makefile\r\n* An awesome management script\r\n* [Modernizr](http://modernizr.com/): \"Modernizr makes it easy for you to write conditional JavaScript and CSS to handle each situation, whether a browser supports a feature or not.\"\r\n* [Bootstrap](http://getbootstrap.com/) is included but easily replaceable\r\n* [Typeplate](http://typeplate.com/): some nice typographic defaults, also easily replaceable\r\n* [py.test](http://pytest.org/latest/) tests\r\n* [Sphinx](http://sphinx-doc.org/): Helps you create some awesome docs for your users, or your internal team\r\n* [Flask-Assets](http://flask-assets.readthedocs.org/en/latest/): A library that packages css and js files and applies filters to them like the closure complier\r\n* [Flask-Cache](http://pythonhosted.org/Flask-Cache/): A simple library that adds the ability to cache specified views\r\n* [Flask-SQLAlchemy](http://pythonhosted.org/Flask-SQLAlchemy/): Flask integration with SQLAlchemy\r\n* [Flask-Script](http://flask-script.readthedocs.org/en/latest/): Allows one to create awesome management scripts\r\n* [Flask-WTF](https://flask-wtf.readthedocs.org/en/latest/index.html): Integrates WTForms into flask\r\n\r\n##What Is Not Included\r\n\r\nSome items which you may need for your setup but are not included to keep this framework agnostic\r\n\r\n* A WSGI setup.\r\n* A Redis or a Memcached setup for Flask-Cache.\r\n* A database migration tool\r\n* A database backend for SQLAlchemy\r\n* A admin interface tool\r\n* A publishing tool like fabric\r\n* A vagrant setup\r\n\r\n##Usage And Structure\r\n\r\n###Using Make To Setup Our Environment\r\n\r\nFirst, lets use the included make file to setup our dev environment. To see all of the available commands, just type make.\r\n\r\n    $ make\r\n\r\n    env         create a development environment using virtualenv\r\n    deps        install dependencies\r\n    clean       remove unwanted stuff\r\n    lint        check style with flake8\r\n    test        run all your tests using py.test\r\n\r\nIf you are ever confused about what each command does, take a look at the makefile, it is very straight forward.\r\n\r\nSo to setup the dev environment, let's type \r\n\r\n    $ make env\r\n\r\nThis will install virtualenv if you don't have it and setup a local python instance. Then it installs all of the needed libs from the requirements.txt file. Now we have our setup with all of the needed 3rd party libs.\r\n\r\nTests are done through py.test, and reside in the tests directory. To run the tests, just type \r\n\r\n    $ make test\r\n\r\nYou can check you PEP8 compliance by typing \r\n\r\n    $ make lint\r\n\r\nDocumentation for your project can be created with Sphinx in the docs directory. For more information, refer to the [Sphinx documentation](http://sphinx-doc.org/).\r\n\r\n###Using The Flask Script File To Run The Development Server\r\n\r\nSimply type\r\n\r\n    ./manage.py\r\n\r\nand you will get a list of commands that you can use to manage the project. For example, to run the server, use \r\n\r\n    ./manage.py server \r\n\r\nand if the installation when well, you should have a working server on http://localhost:5000\r\n\r\nThis management script was created with Flask-Script and is fairly easy to add your own commands, simply refer to their [docs](http://flask-script.readthedocs.org/en/latest/).\r\n\r\n###The Application Structure\r\n\r\nBefore going to far into this, you should at least skim the documentation of all of the thrid party libraries listed above so you have a better understanding of what is going on here.\r\n\r\nThe flask application itself lives in the appname directory. Obviously, you should change this to the name of your application. Once you do though, you must go through and fix all of the imports where it uses the appname name. The easiest way to find them all is to type\r\n\r\n    grep -R appname *\r\n\r\nTo make things organized, this project is in a pseudo MVC setup. With the controllers as flask blueprints, the models as SQLAlchemy models, and the views as the templates.\r\n\r\nThe main logic of the application is in the \\_\\_init\\_\\_.py. This is done so that the application is treated as a module by python which helps later when importing things. Here, we setup all of the third party libs and load in our configuration in an application factory, which is a function that creates and returns an instance of our application. This is done for easier testing purposes and modularity. The function create\\_app takes the path of the config file that you want to use and the type of environment that the server is running in. Most of the library initialization is self explanatory, but let me explain the configuration loading. In your shell's startup script (if you are using bash, its .bash_profile), you must enter this line:\r\n\r\n    APPNAME_ENV = 'dev' \r\n\r\nor\r\n\r\n    APPNAME_ENV = 'prod'\r\n\r\nThis tells the application which class, located in settings.py, to load in for the configuration. To see the different configs, take a look at the settings.py file. This is explained more in depth in the flask docs [here](http://flask.pocoo.org/docs/config/#development-production).\r\n\r\nAfter everything is initialized, the application loads in the main blueprint from the controllers file. If you don't know how flask blueprints work, check out [this](http://flask.pocoo.org/docs/blueprints/) page in the flask documentation. The controllers/main.py file is where we have our current example logic, with a homepage and a example WTForms page. \r\n\r\nWTForm classes are held in a separate file called forms.py and imported when needed.\r\n\r\nThe templates are stored in the templates directory for the main blueprint. It is encouraged, but not required, that every new blueprint has its own templates directory inside of the main templates directory. Blueprints have a special variable to make this easy:\r\n\r\n    simple_page = Blueprint('simple_page', __name__, template_folder='simple')\r\n\r\nand now when you have a function \r\n\r\n    @simple_page.route('/')\r\n    def function()\r\n        return render_template('index.html')\r\n\r\nit will return simple/index.html\r\n\r\nAs you can see, the example code uses bootstrap. You are quite able to rip it out and use your own framework if you wish. \r\n\r\nAll of the templates inherit from the base.html template to avoid repeating yourself and to avoid discrepancies between pages. Also, as you can see in base.html, it is encouraged that you make use of Flask-Assets when ever possible. Using this to your advantage will dramatically speed up load times.\r\n\r\nThe models in this application are SQLAlchemy models in the models.py file, an example User model has been provided.\r\n\r\nIf you are still confused about how this project is structured, I encourage you to read the blog posts listed at the top of the README file.\r\n\r\nNeed help implementing some common features like user login or ajax? For a full blown tutorial covering almost every flask topic that you can think of, I recommend [The Flask Mega-Tutorial](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world).\r\n\r\n### Testing\r\n\r\nTo run your tests use the provided make command:\r\n\r\n    make test\r\n\r\nThe tests are located in the tests/ directory, and the tests are run with py.test. Nothing is too fancy in the test_config.py tests, but in the rest we see some special initialization with the database, this is due to flask not actually running and Flask-SQLAlechmy not being initialized properly, so we pass in the app using \r\n\r\n    db.app = app\r\n\r\nAlso, we see here the use of app.test\\_client(), which means we can use functions to send GET and POST requests from our tests. This is how we test our forms and if the urls are returning correctly.\r\n\r\nSending post and get requests is all well and good, but if you want to get really advanced, check out [webtest](http://webtest.pythonpaste.org/en/latest/).\r\n\r\n##Production\r\n\r\nFirst off, it is very, very important that if you ever open source a flask application based upon this, to not include the settings.py file in your repo. Obviously, your database password is in it, but your secret key as well, which is used to cryptographically sign all of flask's session data.\r\n\r\nWhen going into production there are several things that you should do. First, look at your options for deploying on an actual server [here](http://flask.pocoo.org/docs/deploying/). \r\n\r\nUsing the flask development server is NOT recommended for production for several good reasons, including the ability for anyone who can touch it to run arbitrary python on the server. \r\n\r\nDeploying to the server manually is tedious, so you might want to look into deploying with [fabric](http://flask.pocoo.org/docs/patterns/fabric/) or [distribute](http://flask.pocoo.org/docs/patterns/distribute/#distribute-deployment). \r\n\r\nThis isn't php, so logging errors doesn't come out of the box, [here](http://flask.pocoo.org/docs/errorhandling/) is a great resource on the subject. \r\n\r\nAlso, there are several awesome plug-ins available for flask that add in functionality that you might need for your application, they can be found on the flask website [here](http://flask.pocoo.org/extensions/), or just searching \"flask\" on github.\r\n\r\n##Licenses\r\n\r\nThe original bootstrapy project and the added code from this project are licensed under the BSD license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}